import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.ndimage import gaussian_filter, maximum_filter
from matplotlib import cm

# ========================== 参数设置 ==========================
fc = 77e9          # 雷达载频 77 GHz
c = 3e8            # 光速
lambda_ = c / fc   # 波长
d = lambda_ / 2    # 阵元间距 (均匀线阵)
num_tx = 2         # 发射天线数
num_rx = 4         # 接收天线数
num_chirps = 128   # 每帧啁啾数
num_samples = 128  # 每啁啾采样点数
S = 99.987e9       # 频率斜率
theta_scan = np.linspace(-90, 90, 181)  # 方位角搜索范围
phi_scan = np.linspace(-90, 90, 181)    # 仰角搜索范围
sample_rate = 4e6  # 采样率
chirp_time = 1 / (sample_rate / num_samples)  # 啁啾周期
frame_time = chirp_time * num_chirps  # 帧周期

# ========================== 生成模拟数据 ==========================
def generate_moving_target_data(num_tx, num_rx, num_chirps, num_samples, fc, c, targets):
    lambda_ = c / fc
    t = np.arange(num_samples) / sample_rate  # 时间轴
    sample_data = np.zeros((num_tx, num_rx, num_chirps, num_samples), dtype=complex)
    
    for velocity, distance, azimuth, elevation in targets:
        f_doppler = 2 * velocity / lambda_
        f_range = 2 * distance * S / c
        
        for tx in range(num_tx):
            for rx in range(num_rx):
                for chirp in range(num_chirps):
                    phase_shift = 2 * np.pi * f_doppler * chirp * chirp_time
                    azimuth_shift = 2 * np.pi * d * np.sin(np.deg2rad(azimuth)) * tx / lambda_
                    elevation_shift = 2 * np.pi * d * np.sin(np.deg2rad(elevation)) * rx / lambda_
                    sample_data[tx, rx, chirp, :] += np.exp(1j * (2 * np.pi * f_range * t + phase_shift + azimuth_shift + elevation_shift))
    
    return sample_data

# 示例目标参数
targets = [
    [5, 45, 20, -20],     # 目标1
    [-3, 46, -15, -22],   # 目标2
    [8, 47, 30, -18],     # 目标3
    [-6, 48, -25, -16]    # 目标4
]
data = generate_moving_target_data(num_tx, num_rx, num_chirps, num_samples, fc, c, targets)

# ========================== 数据预处理 ==========================
data_reshaped = np.transpose(data, (3, 2, 0, 1))  # (距离, 多普勒, 发射天线, 接收天线)

# ========================== 距离-多普勒处理 ==========================
range_fft = np.fft.fft(data_reshaped, axis=0)
doppler_fft = np.fft.fftshift(np.fft.fft(range_fft, axis=1), axes=1)
power = np.abs(doppler_fft[:, :, 0, 0]) ** 2
power = power / np.max(power)

# ========================== CFAR目标检测 ==========================
def cfar_2d(matrix, guard_win=5, train_win=10, false_alarm=1e-6):
    num_range, num_doppler = matrix.shape
    mask = np.zeros((num_range, num_doppler), dtype=bool)
    
    for r in range(num_range):
        for d in range(num_doppler):
            r_start = max(0, r - train_win - guard_win)
            r_end = min(num_range, r + train_win + guard_win + 1)
            d_start = max(0, d - train_win - guard_win)
            d_end = min(num_doppler, d + train_win + guard_win + 1)
            
            guard_r_start = max(0, r - guard_win)
            guard_r_end = min(num_range, r + guard_win + 1)
            guard_d_start = max(0, d - guard_win)
            guard_d_end = min(num_doppler, d + guard_win + 1)
            
            training_cells = matrix[r_start:r_end, d_start:d_end].copy()
            guard_cells = matrix[guard_r_start:guard_r_end, guard_d_start:guard_d_end]
            training_cells[r-r_start:r-r_start+guard_cells.shape[0], 
                         d-d_start:d-d_start+guard_cells.shape[1]] = 0
            
            train_mean = np.mean(training_cells[training_cells != 0])
            train_std = np.std(training_cells[training_cells != 0])
            
            threshold = train_mean + 8 * train_std
            if matrix[r, d] > threshold:
                mask[r, d] = True
    
    return mask

target_mask = cfar_2d(power)
intensity_threshold = 0.3
target_mask = target_mask & (power > intensity_threshold)
local_max = maximum_filter(power, size=7)
target_mask = target_mask & (power == local_max)

# ========================== MUSIC角度估计 ==========================
def music_algorithm(snapshots, theta_scan, phi_scan, d, lambda_, num_tx, num_rx, K=1):
    M, N = snapshots.shape
    R = (snapshots @ snapshots.conj().T) / N
    eigen_values, eigen_vectors = np.linalg.eigh(R)
    sorted_indices = np.argsort(eigen_values)[::-1]
    eigen_vectors = eigen_vectors[:, sorted_indices]
    Un = eigen_vectors[:, K:]
    
    music_spectrum = np.zeros((len(theta_scan), len(phi_scan)))
    for i, theta in enumerate(theta_scan):
        for j, phi in enumerate(phi_scan):
            a_tx = np.exp(-1j * 2 * np.pi * d * np.sin(np.deg2rad(theta)) * np.arange(num_tx) / lambda_)
            a_rx = np.exp(-1j * 2 * np.pi * d * np.sin(np.deg2rad(phi)) * np.arange(num_rx) / lambda_)
            a = np.kron(a_tx, a_rx).reshape(-1, 1)
            music_spectrum[i, j] = 1 / np.abs(a.conj().T @ Un @ Un.conj().T @ a).squeeze()
    
    return music_spectrum / np.max(music_spectrum)

angle_map = np.zeros((num_samples, num_chirps, 2))  # 存储角度估计
intensity_map = np.zeros((num_samples, num_chirps)) # 存储强度值

for range_bin in range(num_samples):
    for doppler_bin in range(num_chirps):
        if target_mask[range_bin, doppler_bin]:
            snapshots = doppler_fft[range_bin, doppler_bin, :, :].reshape(num_tx * num_rx, -1)
            spectrum = music_algorithm(snapshots, theta_scan, phi_scan, d, lambda_, num_tx, num_rx, K=1)
            peak_idx = np.unravel_index(np.argmax(spectrum), spectrum.shape)
            angle_map[range_bin, doppler_bin, 0] = theta_scan[peak_idx[0]]
            angle_map[range_bin, doppler_bin, 1] = phi_scan[peak_idx[1]]
            intensity_map[range_bin, doppler_bin] = np.max(spectrum)

# ========================== 结果提取 ==========================
range_scale = c / (2 * S * num_samples / sample_rate)  # 距离分辨率
velocity_scale = lambda_ / (2 * frame_time)            # 速度分辨率

range_bins, doppler_bins = np.where(target_mask)
ranges = range_bins * range_scale
velocities = (doppler_bins - num_chirps//2) * velocity_scale
azimuths = angle_map[range_bins, doppler_bins, 0]
elevations = angle_map[range_bins, doppler_bins, 1]
intensities = intensity_map[range_bins, doppler_bins]

# 有效性过滤
valid_mask = (
    (ranges >= 40) & (ranges <= 55) &
    (velocities >= -10) & (velocities <= 10)
)
ranges = ranges[valid_mask]
velocities = velocities[valid_mask]
azimuths = azimuths[valid_mask]
elevations = elevations[valid_mask]
intensities = intensities[valid_mask]

# ========================== 可视化模块 ==========================
def plot_range_doppler_map():
    """ 绘制距离-多普勒图 """
    power_db = 10 * np.log10(np.abs(doppler_fft[:, :, 0, 0])**2 + 1e-10)
    
    plt.figure(figsize=(12, 8))
    plt.imshow(power_db, aspect='auto', cmap='jet', 
              extent=[-velocity_scale*num_chirps/2, velocity_scale*num_chirps/2, 
                      range_scale*num_samples, 0])
    plt.scatter(velocities, ranges, c='red', s=20, marker='x', label='检测目标')
    plt.xlabel('Velocity (m/s)')
    plt.ylabel('Range (m)')
    plt.colorbar(label='Power (dB)')
    plt.title('距离-多普勒图')
    plt.legend()
    plt.tight_layout()
    plt.show()

def plot_music_spectrum(range_idx, doppler_idx):
    """ 绘制指定单元的MUSIC谱 """
    if not target_mask[range_idx, doppler_idx]:
        print("未检测到目标")
        return
    
    snapshots = doppler_fft[range_idx, doppler_idx, :, :].reshape(num_tx*num_rx, -1)
    spectrum = music_algorithm(snapshots, theta_scan, phi_scan, d, lambda_, num_tx, num_rx)
    
    # 3D MUSIC谱
    theta_grid, phi_grid = np.meshgrid(theta_scan, phi_scan)
    
    fig = plt.figure(figsize=(18, 6))
    ax = fig.add_subplot(131, projection='3d')
    ax.plot_surface(theta_grid, phi_grid, spectrum.T, cmap='jet')
    ax.set_xlabel('Azimuth (deg)')
    ax.set_ylabel('Elevation (deg)')
    ax.set_zlabel('Power')
    
    # 2D投影
    plt.subplot(132)
    plt.contourf(theta_scan, phi_scan, spectrum.T, 20, cmap='jet')
    for t in targets:
        plt.plot(t[2], t[3], 'wx', markersize=10)
    plt.xlabel('Azimuth (deg)')
    plt.ylabel('Elevation (deg)')
    
    plt.subplot(133)
    plt.plot(theta_scan, np.max(spectrum, axis=1), label='Azimuth')
    plt.plot(phi_scan, np.max(spectrum, axis=0), label='Elevation')
    plt.legend()
    plt.xlabel('Angle (deg)')
    plt.ylabel('Normalized Power')
    plt.suptitle(f'MUSIC谱分析 (距离={range_idx*range_scale:.1f}m, 速度={doppler_idx*velocity_scale:.1f}m/s)')
    plt.tight_layout()
    plt.show()

def plot_3d_pointcloud():
    """ 3D点云可视化 """
    fig = plt.figure(figsize=(15, 10))
    ax = fig.add_subplot(111, projection='3d')
    sc = ax.scatter(ranges, azimuths, elevations, c=velocities, 
                   cmap='viridis', s=50, alpha=0.7)
    
    # 标记真实目标
    for t in targets:
        ax.scatter(t[1], t[2], t[3], c='red', s=200, marker='*', edgecolor='white')
    
    ax.set_xlabel('Range (m)')
    ax.set_ylabel('Azimuth (deg)')
    ax.set_zlabel('Elevation (deg)')
    plt.colorbar(sc, label='Velocity (m/s)')
    plt.title('雷达点云（含4个真实目标）')
    plt.tight_layout()
    plt.show()

def plot_polar_view():
    """ 极坐标显示 """
    fig = plt.figure(figsize=(10, 10))
    ax = fig.add_subplot(111, projection='polar')
    azimuth_rad = np.deg2rad(azimuths)
    
    sc = ax.scatter(azimuth_rad, ranges, c=intensities, 
                   cmap='viridis', s=50, alpha=0.7)
    
    # 标记真实目标
    for t in targets:
        ax.scatter(np.deg2rad(t[2]), t[1], c='red', s=200, marker='*', edgecolor='white')
    
    ax.set_theta_zero_location('N')
    ax.set_theta_direction(-1)
    ax.set_rmax(100)
    plt.colorbar(sc, label='Signal Intensity')
    plt.title('极坐标视图（距离-方位角）')
    plt.tight_layout()
    plt.show()

def plot_all_visualizations():
    """ 执行所有可视化 """
    plt.close('all')
    plot_range_doppler_map()
    plot_3d_pointcloud()
    plot_polar_view()
    
    # 显示前3个检测目标的MUSIC谱
    for i in range(min(3, len(ranges))):
        plot_music_spectrum(range_bins[i], doppler_bins[i])

# ========================== 主程序 ==========================
if __name__ == "__main__":
    print(f"检测到目标数量: {len(ranges)}")
    if len(ranges) > 0:
        plot_all_visualizations()
    else:
        print("未检测到有效目标")
